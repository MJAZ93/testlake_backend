definitions:
  auth.AuthData:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/auth.AuthUser'
    type: object
  auth.AuthUser:
    properties:
      auth_provider:
        $ref: '#/definitions/model.AuthProvider'
      avatar_url:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_email_verified:
        type: boolean
      last_login_at:
        type: string
      last_name:
        type: string
      status:
        $ref: '#/definitions/model.UserStatus'
      updated_at:
        type: string
      username:
        type: string
    type: object
  auth.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  auth.RefreshTokenOut:
    properties:
      data:
        $ref: '#/definitions/auth.TokenData'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  auth.ResendEmailConfirmationRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  auth.ResetPasswordRequest:
    properties:
      new_password:
        minLength: 6
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  auth.SignInOut:
    properties:
      data:
        $ref: '#/definitions/auth.AuthData'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  auth.SignInRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.SignUpOut:
    properties:
      data:
        $ref: '#/definitions/auth.AuthData'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  auth.SignUpRequest:
    properties:
      auth_provider:
        $ref: '#/definitions/model.AuthProvider'
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        maxLength: 100
        minLength: 3
        type: string
    required:
    - auth_provider
    - email
    - password
    - username
    type: object
  auth.TokenData:
    properties:
      token:
        type: string
    type: object
  billing.BillingHistoryItem:
    properties:
      amount:
        type: number
      currency:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: string
      status:
        type: string
      type:
        description: '"invoice" or "payment"'
        type: string
    type: object
  billing.BillingHistoryOut:
    properties:
      error_code:
        type: integer
      error_description:
        type: string
      list:
        items:
          $ref: '#/definitions/billing.BillingHistoryItem'
        type: array
      meta:
        $ref: '#/definitions/inout.PaginationMeta'
    type: object
  billing.BillingOverview:
    properties:
      current_plan:
        $ref: '#/definitions/plan.Plan'
      current_subscription:
        $ref: '#/definitions/subscription.Subscription'
      current_usage:
        $ref: '#/definitions/subscription.UsageMetrics'
      next_billing_amount:
        type: number
      next_billing_date:
        type: string
      plan_limits:
        $ref: '#/definitions/subscription.PlanLimits'
      recent_payments:
        items:
          $ref: '#/definitions/payment.Payment'
        type: array
      unpaid_invoices:
        items:
          $ref: '#/definitions/billing.Invoice'
        type: array
    type: object
  billing.BillingOverviewOut:
    properties:
      data:
        $ref: '#/definitions/billing.BillingOverview'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  billing.Invoice:
    properties:
      amount:
        type: number
      billing_period_end:
        type: string
      billing_period_start:
        type: string
      created_at:
        type: string
      currency:
        type: string
      due_date:
        type: string
      id:
        type: string
      invoice_number:
        type: string
      invoice_url:
        type: string
      line_items:
        items:
          $ref: '#/definitions/billing.InvoiceLineItem'
        type: array
      organization_id:
        type: string
      paid_at:
        type: string
      paypal_invoice_id:
        type: string
      status:
        $ref: '#/definitions/model.InvoiceStatus'
      subscription_id:
        type: string
      tax_amount:
        type: number
      total_amount:
        type: number
      updated_at:
        type: string
    type: object
  billing.InvoiceLineItem:
    properties:
      description:
        type: string
      id:
        type: string
      quantity:
        type: integer
      total_price:
        type: number
      unit_price:
        type: number
    type: object
  billing.InvoiceListOut:
    properties:
      error_code:
        type: integer
      error_description:
        type: string
      list:
        items:
          $ref: '#/definitions/billing.Invoice'
        type: array
      meta:
        $ref: '#/definitions/inout.PaginationMeta'
    type: object
  billing.InvoiceOut:
    properties:
      data:
        $ref: '#/definitions/billing.Invoice'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  billing.PayInvoiceRequest:
    properties:
      payment_method_id:
        type: string
    required:
    - payment_method_id
    type: object
  billing.PaymentOut:
    properties:
      data:
        $ref: '#/definitions/payment.Payment'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  inout.BaseResponse:
    properties:
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  inout.PaginationMeta:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  model.AuthProvider:
    enum:
    - email
    - gmail
    - apple
    type: string
    x-enum-varnames:
    - AuthProviderEmail
    - AuthProviderGmail
    - AuthProviderApple
  model.BillingCycle:
    enum:
    - monthly
    - yearly
    type: string
    x-enum-varnames:
    - BillingCycleMonthly
    - BillingCycleYearly
  model.InvoiceStatus:
    enum:
    - draft
    - sent
    - paid
    - cancelled
    - refunded
    type: string
    x-enum-varnames:
    - InvoiceStatusDraft
    - InvoiceStatusSent
    - InvoiceStatusPaid
    - InvoiceStatusCancelled
    - InvoiceStatusRefunded
  model.OrganizationStatus:
    enum:
    - active
    - suspended
    - cancelled
    type: string
    x-enum-varnames:
    - OrganizationStatusActive
    - OrganizationStatusSuspended
    - OrganizationStatusCancelled
  model.PaymentMethodEnum:
    enum:
    - paypal
    type: string
    x-enum-varnames:
    - PaymentMethodEnumPayPal
  model.PaymentMethodType:
    enum:
    - paypal
    type: string
    x-enum-varnames:
    - PaymentMethodTypePayPal
  model.PaymentStatus:
    enum:
    - pending
    - completed
    - failed
    - cancelled
    - refunded
    type: string
    x-enum-varnames:
    - PaymentStatusPending
    - PaymentStatusCompleted
    - PaymentStatusFailed
    - PaymentStatusCancelled
    - PaymentStatusRefunded
  model.PlanType:
    enum:
    - free
    - starter
    - professional
    - enterprise
    type: string
    x-enum-varnames:
    - PlanTypeFree
    - PlanTypeStarter
    - PlanTypeProfessional
    - PlanTypeEnterprise
  model.SubscriptionStatus:
    enum:
    - active
    - cancelled
    - suspended
    - expired
    - pending
    type: string
    x-enum-varnames:
    - SubscriptionStatusActive
    - SubscriptionStatusCancelled
    - SubscriptionStatusSuspended
    - SubscriptionStatusExpired
    - SubscriptionStatusPending
  model.UserStatus:
    enum:
    - active
    - suspended
    - inactive
    type: string
    x-enum-varnames:
    - UserStatusActive
    - UserStatusSuspended
    - UserStatusInactive
  organization.CreateOrganizationRequest:
    properties:
      description:
        type: string
      logo_url:
        type: string
      max_projects:
        type: integer
      max_users:
        type: integer
      name:
        maxLength: 200
        minLength: 2
        type: string
      plan_type:
        $ref: '#/definitions/model.PlanType'
      slug:
        maxLength: 100
        minLength: 2
        type: string
    required:
    - name
    - slug
    type: object
  organization.InviteMemberRequest:
    properties:
      email:
        type: string
      role:
        enum:
        - member
        - admin
        type: string
    required:
    - email
    - role
    type: object
  organization.InviteOut:
    properties:
      data:
        $ref: '#/definitions/organization.InviteResult'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  organization.InviteResult:
    properties:
      email:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  organization.Member:
    properties:
      email:
        type: string
      full_name:
        type: string
      id:
        type: string
      joined_at:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  organization.MembersOut:
    properties:
      data:
        items:
          $ref: '#/definitions/organization.Member'
        type: array
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  organization.Organization:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      description:
        type: string
      id:
        type: string
      logo_url:
        type: string
      max_projects:
        type: integer
      max_users:
        type: integer
      name:
        type: string
      plan_type:
        $ref: '#/definitions/model.PlanType'
      slug:
        type: string
      status:
        $ref: '#/definitions/model.OrganizationStatus'
      updated_at:
        type: string
    type: object
  organization.OrganizationListOut:
    properties:
      error_code:
        type: integer
      error_description:
        type: string
      list:
        items:
          $ref: '#/definitions/organization.Organization'
        type: array
      meta:
        $ref: '#/definitions/inout.PaginationMeta'
    type: object
  organization.OrganizationOut:
    properties:
      data:
        $ref: '#/definitions/organization.Organization'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  organization.PendingInvite:
    properties:
      email:
        type: string
      expires_at:
        type: string
      id:
        type: string
      invited_at:
        type: string
      role:
        type: string
      token:
        type: string
    type: object
  organization.PendingInvitesOut:
    properties:
      data:
        items:
          $ref: '#/definitions/organization.PendingInvite'
        type: array
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  organization.UpdateMemberRoleRequest:
    properties:
      role:
        enum:
        - member
        - admin
        type: string
    required:
    - role
    type: object
  organization.UpdateOrganizationRequest:
    properties:
      description:
        type: string
      logo_url:
        type: string
      max_projects:
        minimum: 1
        type: integer
      max_users:
        minimum: 1
        type: integer
      name:
        maxLength: 200
        minLength: 2
        type: string
      plan_type:
        $ref: '#/definitions/model.PlanType'
    type: object
  payment.CreatePaymentMethodRequest:
    properties:
      is_default:
        type: boolean
      payment_method_type:
        $ref: '#/definitions/model.PaymentMethodType'
      paypal_email:
        type: string
      paypal_payer_id:
        type: string
    required:
    - paypal_email
    type: object
  payment.Payment:
    properties:
      amount:
        type: number
      created_at:
        type: string
      currency:
        type: string
      failure_reason:
        type: string
      id:
        type: string
      invoice_id:
        type: string
      organization_id:
        type: string
      payment_method:
        $ref: '#/definitions/model.PaymentMethodEnum'
      paypal_payer_id:
        type: string
      paypal_payment_id:
        type: string
      processed_at:
        type: string
      status:
        $ref: '#/definitions/model.PaymentStatus'
      subscription_id:
        type: string
      updated_at:
        type: string
    type: object
  payment.PaymentMethod:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      is_default:
        type: boolean
      organization_id:
        type: string
      payment_method_type:
        $ref: '#/definitions/model.PaymentMethodType'
      paypal_email:
        type: string
      paypal_payer_id:
        type: string
      updated_at:
        type: string
    type: object
  payment.PaymentMethodListOut:
    properties:
      data:
        items:
          $ref: '#/definitions/payment.PaymentMethod'
        type: array
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  payment.PaymentMethodOut:
    properties:
      data:
        $ref: '#/definitions/payment.PaymentMethod'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  payment.UpdatePaymentMethodRequest:
    properties:
      is_default:
        type: boolean
      paypal_email:
        type: string
      paypal_payer_id:
        type: string
    type: object
  plan.Plan:
    properties:
      created_at:
        type: string
      description:
        type: string
      features:
        items:
          type: string
        type: array
      id:
        type: string
      is_active:
        type: boolean
      max_environments:
        type: integer
      max_projects:
        type: integer
      max_schemas:
        type: integer
      max_test_records_per_schema:
        type: integer
      max_users:
        type: integer
      name:
        type: string
      price_monthly:
        type: number
      price_yearly:
        type: number
      slug:
        type: string
      updated_at:
        type: string
    type: object
  plan.PlanComparison:
    properties:
      plans:
        items:
          $ref: '#/definitions/plan.Plan'
        type: array
    type: object
  plan.PlanComparisonOut:
    properties:
      data:
        $ref: '#/definitions/plan.PlanComparison'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  plan.PlanListOut:
    properties:
      error_code:
        type: integer
      error_description:
        type: string
      list:
        items:
          $ref: '#/definitions/plan.Plan'
        type: array
    type: object
  plan.PlanOut:
    properties:
      data:
        $ref: '#/definitions/plan.Plan'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  subscription.ChangePlanRequest:
    properties:
      billing_cycle:
        $ref: '#/definitions/model.BillingCycle'
      new_plan_id:
        type: string
    required:
    - billing_cycle
    - new_plan_id
    type: object
  subscription.CreateSubscriptionRequest:
    properties:
      billing_cycle:
        $ref: '#/definitions/model.BillingCycle'
      plan_id:
        type: string
    required:
    - billing_cycle
    - plan_id
    type: object
  subscription.PlanLimits:
    properties:
      max_environments:
        type: integer
      max_projects:
        type: integer
      max_schemas:
        type: integer
      max_test_records_per_schema:
        type: integer
      max_users:
        type: integer
    type: object
  subscription.Subscription:
    properties:
      billing_cycle:
        $ref: '#/definitions/model.BillingCycle'
      cancel_at_period_end:
        type: boolean
      cancelled_at:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      current_period_end:
        type: string
      current_period_start:
        type: string
      id:
        type: string
      organization_id:
        type: string
      paypal_subscription_id:
        type: string
      plan_id:
        type: string
      status:
        $ref: '#/definitions/model.SubscriptionStatus'
      trial_end:
        type: string
      updated_at:
        type: string
    type: object
  subscription.SubscriptionOut:
    properties:
      data:
        $ref: '#/definitions/subscription.Subscription'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  subscription.SubscriptionUsageOut:
    properties:
      data:
        $ref: '#/definitions/subscription.UsageData'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  subscription.UsageData:
    properties:
      current_usage:
        $ref: '#/definitions/subscription.UsageMetrics'
      period_end:
        type: string
      period_start:
        type: string
      plan_limits:
        $ref: '#/definitions/subscription.PlanLimits'
    type: object
  subscription.UsageMetrics:
    properties:
      api_requests_count:
        type: integer
      environments_count:
        type: integer
      projects_count:
        type: integer
      schemas_count:
        type: integer
      test_records_count:
        type: integer
      users_count:
        type: integer
    type: object
  user.AcceptInviteOut:
    properties:
      data:
        $ref: '#/definitions/user.AcceptInviteResult'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  user.AcceptInviteResult:
    properties:
      message:
        type: string
      organization_id:
        type: string
      organization_name:
        type: string
      role:
        type: string
      status:
        type: string
    type: object
  user.ActivityItem:
    properties:
      description:
        type: string
      id:
        type: string
      timestamp:
        type: string
      type:
        type: string
    type: object
  user.DashboardData:
    properties:
      organization_count:
        type: integer
      personal_projects:
        type: integer
      recent_activity:
        items:
          $ref: '#/definitions/user.ActivityItem'
        type: array
      user:
        $ref: '#/definitions/user.User'
    type: object
  user.DashboardOut:
    properties:
      data:
        $ref: '#/definitions/user.DashboardData'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  user.DenyInviteOut:
    properties:
      data:
        $ref: '#/definitions/user.DenyInviteResult'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  user.DenyInviteResult:
    properties:
      message:
        type: string
      organization_id:
        type: string
      organization_name:
        type: string
      status:
        type: string
    type: object
  user.Notification:
    properties:
      created_at:
        type: string
      id:
        type: string
      is_read:
        type: boolean
      message:
        type: string
      read_at:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  user.NotificationsOut:
    properties:
      data:
        items:
          $ref: '#/definitions/user.Notification'
        type: array
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  user.PendingInvite:
    properties:
      expires_at:
        type: string
      id:
        type: string
      invited_at:
        type: string
      organization_id:
        type: string
      organization_name:
        type: string
      role:
        type: string
      token:
        type: string
    type: object
  user.PendingInvitesOut:
    properties:
      data:
        items:
          $ref: '#/definitions/user.PendingInvite'
        type: array
      error_code:
        type: integer
      error_description:
        type: string
    type: object
  user.UpdateUserRequest:
    properties:
      avatar_url:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
  user.User:
    properties:
      auth_provider:
        $ref: '#/definitions/model.AuthProvider'
      avatar_url:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_email_verified:
        type: boolean
      last_login_at:
        type: string
      last_name:
        type: string
      status:
        $ref: '#/definitions/model.UserStatus'
      updated_at:
        type: string
      username:
        type: string
    type: object
  user.UserOut:
    properties:
      data:
        $ref: '#/definitions/user.User'
      error_code:
        type: integer
      error_description:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Send password reset email to user
      parameters:
      - description: Email for password reset
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      summary: Request password reset
      tags:
      - Authentication
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate a new JWT token from valid existing token
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.RefreshTokenOut'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Refresh JWT token
      tags:
      - Authentication
  /api/v1/auth/resend-email-confirmation:
    post:
      consumes:
      - application/json
      description: Resend email confirmation to user
      parameters:
      - description: Email to resend confirmation
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ResendEmailConfirmationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      summary: Resend email confirmation
      tags:
      - Authentication
  /api/v1/auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset password with valid reset token
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Password reset data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      summary: Reset user password
      tags:
      - Authentication
  /api/v1/auth/signin:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, returns JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/auth.SignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SignInOut'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      summary: User login
      tags:
      - Authentication
  /api/v1/auth/signout:
    post:
      consumes:
      - application/json
      description: Sign out current user (invalidate JWT token)
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      summary: User logout
      tags:
      - Authentication
  /api/v1/auth/signup:
    post:
      consumes:
      - application/json
      description: Create a new user account with email and password
      parameters:
      - description: Registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.SignUpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.SignUpOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      summary: User registration
      tags:
      - Authentication
  /api/v1/auth/verify-email/{token}:
    get:
      consumes:
      - application/json
      description: Verify user email with verification token
      parameters:
      - description: Email verification token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      summary: Verify email address
      tags:
      - Authentication
  /api/v1/invoices/{id}:
    get:
      consumes:
      - application/json
      description: Get a specific invoice by ID
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/billing.InvoiceOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get invoice
      tags:
      - Billing
  /api/v1/invoices/{id}/download:
    get:
      consumes:
      - application/json
      description: Download a specific invoice
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: Redirect to invoice PDF
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Download invoice
      tags:
      - Billing
  /api/v1/invoices/{id}/pay:
    post:
      consumes:
      - application/json
      description: Process payment for an invoice
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment data
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/billing.PayInvoiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/billing.PaymentOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Pay invoice
      tags:
      - Billing
  /api/v1/organizations:
    get:
      consumes:
      - application/json
      description: Get paginated list of organizations for current user
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page number (default 0)
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organization.OrganizationListOut'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get organizations
      tags:
      - Organization Management
    post:
      consumes:
      - application/json
      description: Create a new organization
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization data
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/organization.CreateOrganizationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/organization.OrganizationOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Create organization
      tags:
      - Organization Management
  /api/v1/organizations/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete an organization
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Delete organization
      tags:
      - Organization Management
    get:
      consumes:
      - application/json
      description: Get organization details by ID
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organization.OrganizationOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get organization
      tags:
      - Organization Management
    put:
      consumes:
      - application/json
      description: Update organization details
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Organization update data
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/organization.UpdateOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organization.OrganizationOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update organization
      tags:
      - Organization Management
  /api/v1/organizations/{id}/billing/history:
    get:
      consumes:
      - application/json
      description: Get billing history for an organization
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/billing.BillingHistoryOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get billing history
      tags:
      - Billing
  /api/v1/organizations/{id}/billing/overview:
    get:
      consumes:
      - application/json
      description: Get billing overview for an organization
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/billing.BillingOverviewOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get billing overview
      tags:
      - Billing
  /api/v1/organizations/{id}/invite:
    post:
      consumes:
      - application/json
      description: Invite a user to join the organization
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Invitation data
        in: body
        name: invite
        required: true
        schema:
          $ref: '#/definitions/organization.InviteMemberRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organization.InviteOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Invite member
      tags:
      - Organization Management
  /api/v1/organizations/{id}/invites:
    get:
      consumes:
      - application/json
      description: Get list of pending invitations for the organization
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organization.PendingInvitesOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get pending invites
      tags:
      - Organization Management
  /api/v1/organizations/{id}/invoices:
    get:
      consumes:
      - application/json
      description: Get invoices for an organization
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/billing.InvoiceListOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get invoices
      tags:
      - Billing
  /api/v1/organizations/{id}/members:
    get:
      consumes:
      - application/json
      description: Get list of organization members
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organization.MembersOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get organization members
      tags:
      - Organization Management
  /api/v1/organizations/{id}/members/{userId}:
    delete:
      consumes:
      - application/json
      description: Remove a member from the organization
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID to remove
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Remove member
      tags:
      - Organization Management
  /api/v1/organizations/{id}/members/{userId}/role:
    put:
      consumes:
      - application/json
      description: Update a member's role in the organization
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: Role update data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/organization.UpdateMemberRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update member role
      tags:
      - Organization Management
  /api/v1/organizations/{id}/payment-methods:
    get:
      consumes:
      - application/json
      description: Get all payment methods for an organization
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payment.PaymentMethodListOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get payment methods
      tags:
      - Payment Methods
    post:
      consumes:
      - application/json
      description: Create a new payment method for an organization
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment method data
        in: body
        name: paymentMethod
        required: true
        schema:
          $ref: '#/definitions/payment.CreatePaymentMethodRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/payment.PaymentMethodOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Create payment method
      tags:
      - Payment Methods
  /api/v1/organizations/{id}/payment-methods/{pmId}:
    delete:
      consumes:
      - application/json
      description: Delete a payment method
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment Method ID
        in: path
        name: pmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Delete payment method
      tags:
      - Payment Methods
    put:
      consumes:
      - application/json
      description: Update an existing payment method
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment Method ID
        in: path
        name: pmId
        required: true
        type: string
      - description: Payment method data
        in: body
        name: paymentMethod
        required: true
        schema:
          $ref: '#/definitions/payment.UpdatePaymentMethodRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payment.PaymentMethodOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update payment method
      tags:
      - Payment Methods
  /api/v1/organizations/{id}/payment-methods/{pmId}/set-default:
    put:
      consumes:
      - application/json
      description: Set a payment method as the default for the organization
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment Method ID
        in: path
        name: pmId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Set default payment method
      tags:
      - Payment Methods
  /api/v1/organizations/{id}/subscription:
    get:
      consumes:
      - application/json
      description: Get current subscription for an organization
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscription.SubscriptionOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get organization subscription
      tags:
      - Subscriptions
  /api/v1/organizations/{id}/subscription/cancel:
    post:
      consumes:
      - application/json
      description: Cancel an organization's subscription
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Cancel subscription
      tags:
      - Subscriptions
  /api/v1/organizations/{id}/subscription/change-plan:
    put:
      consumes:
      - application/json
      description: Change the plan for an existing subscription
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Plan change data
        in: body
        name: plan
        required: true
        schema:
          $ref: '#/definitions/subscription.ChangePlanRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscription.SubscriptionOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Change subscription plan
      tags:
      - Subscriptions
  /api/v1/organizations/{id}/subscription/create:
    post:
      consumes:
      - application/json
      description: Create a new subscription for an organization
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      - description: Subscription data
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/subscription.CreateSubscriptionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/subscription.SubscriptionOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Create subscription
      tags:
      - Subscriptions
  /api/v1/organizations/{id}/subscription/reactivate:
    post:
      consumes:
      - application/json
      description: Reactivate a cancelled subscription
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscription.SubscriptionOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Reactivate subscription
      tags:
      - Subscriptions
  /api/v1/organizations/{id}/subscription/usage:
    get:
      consumes:
      - application/json
      description: Get current usage metrics for an organization's subscription
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Organization ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscription.SubscriptionUsageOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get subscription usage
      tags:
      - Subscriptions
  /api/v1/plans:
    get:
      consumes:
      - application/json
      description: Get all available subscription plans
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/plan.PlanListOut'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      summary: Get all plans
      tags:
      - Plans
  /api/v1/plans/{id}:
    get:
      consumes:
      - application/json
      description: Get specific plan information by ID
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/plan.PlanOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      summary: Get plan by ID
      tags:
      - Plans
  /api/v1/plans/compare:
    get:
      consumes:
      - application/json
      description: Get all plans for comparison
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/plan.PlanComparisonOut'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      summary: Compare plans
      tags:
      - Plans
  /api/v1/users/account:
    delete:
      consumes:
      - application/json
      description: Delete current user's account permanently
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Delete user account
      tags:
      - User Management
  /api/v1/users/dashboard:
    get:
      consumes:
      - application/json
      description: Get user dashboard with overview of projects and activities
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.DashboardOut'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get user dashboard
      tags:
      - User Management
  /api/v1/users/invites:
    get:
      consumes:
      - application/json
      description: Get all pending organization invitations for the current user
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.PendingInvitesOut'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get pending invitations
      tags:
      - User Management
  /api/v1/users/invites/{token}/accept:
    post:
      consumes:
      - application/json
      description: Accept an organization invitation using the invitation token
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.AcceptInviteOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Accept organization invite
      tags:
      - User Management
  /api/v1/users/invites/{token}/deny:
    post:
      consumes:
      - application/json
      description: Decline an organization invitation using the invitation token
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.DenyInviteOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Deny organization invite
      tags:
      - User Management
  /api/v1/users/notifications:
    get:
      consumes:
      - application/json
      description: Get list of user notifications
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.NotificationsOut'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get user notifications
      tags:
      - User Management
  /api/v1/users/notifications/{id}/read:
    put:
      consumes:
      - application/json
      description: Mark a specific notification as read
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Mark notification as read
      tags:
      - User Management
  /api/v1/users/profile:
    get:
      consumes:
      - application/json
      description: Get current user's profile information
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserOut'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - User Management
    put:
      consumes:
      - application/json
      description: Update current user's profile information
      parameters:
      - description: Bearer token
        format: Bearer {token}
        in: header
        name: Authorization
        required: true
        type: string
      - description: User profile data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/inout.BaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/inout.BaseResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - User Management
swagger: "2.0"
